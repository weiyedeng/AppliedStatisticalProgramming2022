// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// est_finalWeights
List est_finalWeights(NumericVector y, NumericVector ftk, double sd, NumericVector weights, double threshold);
RcppExport SEXP _EMBARcpp_est_finalWeights(SEXP ySEXP, SEXP ftkSEXP, SEXP sdSEXP, SEXP weightsSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ftk(ftkSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(est_finalWeights(y, ftk, sd, weights, threshold));
    return rcpp_result_gen;
END_RCPP
}
// est_ztk
NumericMatrix est_ztk(NumericVector y, NumericVector ftk, double sd, NumericVector weights);
RcppExport SEXP _EMBARcpp_est_ztk(SEXP ySEXP, SEXP ftkSEXP, SEXP sdSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ftk(ftkSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(est_ztk(y, ftk, sd, weights));
    return rcpp_result_gen;
END_RCPP
}
// get_num_den
List get_num_den(NumericVector y, NumericVector ftk, double sd, NumericVector weights);
RcppExport SEXP _EMBARcpp_get_num_den(SEXP ySEXP, SEXP ftkSEXP, SEXP sdSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ftk(ftkSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_num_den(y, ftk, sd, weights));
    return rcpp_result_gen;
END_RCPP
}
// update_weights
NumericVector update_weights(NumericMatrix ztk_mat);
RcppExport SEXP _EMBARcpp_update_weights(SEXP ztk_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ztk_mat(ztk_matSEXP);
    rcpp_result_gen = Rcpp::wrap(update_weights(ztk_mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EMBARcpp_est_finalWeights", (DL_FUNC) &_EMBARcpp_est_finalWeights, 5},
    {"_EMBARcpp_est_ztk", (DL_FUNC) &_EMBARcpp_est_ztk, 4},
    {"_EMBARcpp_get_num_den", (DL_FUNC) &_EMBARcpp_get_num_den, 4},
    {"_EMBARcpp_update_weights", (DL_FUNC) &_EMBARcpp_update_weights, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_EMBARcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
