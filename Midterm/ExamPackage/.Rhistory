?seq
factorial(2,3,4,5)
factorial(2)
sapply(c(1,2,3,4,5,6,7,8), factorial)
log(sapply(c(1,2,3,4,5,6,7,8), factorial))
log(sapply(c(0,1,2,3,4,5,6,7,8), factorial))
factorial(c(1,2,3,4,5))
library(devtools)
library(roxygen2)
#Package directory
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
check(current.code)
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
source("~/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage/DevelopmentFile.R", echo=TRUE)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
sample(1:10, 20，replace=T)
?sample
sample(1:10, 20，replace=T)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
check(current.code)
sample(1:10, 20,replace=T)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
definition=function(y, lambda){
n <- length(y)
## Count data has to be >= 0; lambda has to be > 0
if (any(y) < 0) {
stop("Every value of y must be larger than or equal to 0.")
}
if (lambda < 0) {
stop("lambda must be larger than 0.")
}
## formula
LL <- -n*lambda - sum(log(factorial(y))) + log(lambda)*sum(y)
return(LL)
}
definition(1:10,2)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
use_mit_license()
use_mit_license()
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
#Package directory
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
## Let's try it out
set.seed(123)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
## Let's try it out
set.seed(123)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
?mle
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
?mle
mle(y)
## Not working
y <- c(-1,2,3,4,5)
logLik(y,2)
y < 0
any(y < 0)
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
?mle
## Let's try it out
set.seed(123)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
mle(y)
## Not working
y <- c(-1,2,3,4,5)
logLik(y,2)
mle(y)
sample(1:10,10,replace = T)
sample(1:10,10,replace = F)
replicate(100, {
}
sds
}
replicate(100, {
re_y <- sample(1:10, 10, replace = T) ### resampling with replacement
return(re_y)
})
a <- replicate(100, {
re_y <- sample(1:10, 10, replace = T) ### resampling with replacement
return(re_y)
})
View(a)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
#Package directory
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
if (!(SEtype %in% c("basic", "bootstrap")) {
stop("SEtype must be either 'basic' or 'bootstrap'.")
}
!(SEtype %in% c("basic", "bootstrap")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
install.packages("jsonlite")
library(jsonlite)
?toJSON
?unbox
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
?standardError
standardError(y,"bootstrap")
## Let's try it out
set.seed(123)
## Let's try it out
set.seed(123)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
mle(y)
standardError(y,"bootstrap")
sd(y)
sd(y) / sqrt(10)
standardError(y,"bootstrap", B=1000)
standardError(y,"basic", B=1000)
y <- sample(x=1:10, size=100, replace=TRUE)
logLik(y,2)
mle(y)
standardError(y,"bootstrap", B=1000)
standardError(y,"basic", B=1000)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
?mle
?standardError
## Let's try it out
set.seed(123)
y <- sample(x=1:10, size=100, replace=TRUE)
logLik(y,2)
mle(y)
standardError(y,"bootstrap", B=1000)
standardError(y,"basic", B=1000)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
mle(y)
standardError(y,"bootstrap", B=1000)
standardError(y,"basic", B=1000)
## Not working
y <- c(-1,2,3,4,5)
a <- 1
attributes(a)
?attr
attr(a, "SEmethod") <- "b"
a
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
check(current.code)
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
y <- sample(x=1:10, size=20, replace=TRUE)
estimatePois(y, lambda = 2, SEtype = "bootstrap")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
?mle
?standardError
?estimatePois
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
?estimatePois
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
?mle
?standardError
?estimatePois
?estimatePois
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
?sample
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?logLik
?PoisMLE
??PoisMLE
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
load_all(current.code)
install(current.code)
?PoisMLE
??PoisMLE
?logLik
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
install(current.code)
?plot
?setMethod
example(setMethod)
example(setMethod)
?lines
?plot
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
plot(x <- sort(rnorm(47)), type = "b", main = "plot(x, type = \"s\")")
plot(x=1:10)
plot(x=1:10,y=1:10)
?plot
plot(1:10)
base::plot(1:10)
?plot
graphics::plot(1:10)
