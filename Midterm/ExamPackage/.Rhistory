mean(transphobia$tolerance.t0[transphobia$treat_ind == 0], na.rm = TRUE)
mean(transphobia$tolerance.t1[transphobia$treat_ind == 1], na.rm = TRUE) -
mean(transphobia$tolerance.t1[transphobia$treat_ind == 0], na.rm = TRUE)
mean(transphobia$tolerance.t2[transphobia$treat_ind == 1], na.rm = TRUE) -
mean(transphobia$tolerance.t2[transphobia$treat_ind == 0], na.rm = TRUE)
#2
prop.table(table(transphobia$treat_ind, transphobia$vf_party), 0)
transphobia <- read.csv("/Users/rexdeng/Dropbox/00_QPM_U_Shared/05_Exams/Midterm/data/transphobia.csv")
summary(transphobia)
mean(transphobia$tolerance.t0[transphobia$treat_ind == 1], na.rm = TRUE) -
mean(transphobia$tolerance.t0[transphobia$treat_ind == 0], na.rm = TRUE)
mean(transphobia$tolerance.t1[transphobia$treat_ind == 1], na.rm = TRUE) -
mean(transphobia$tolerance.t1[transphobia$treat_ind == 0], na.rm = TRUE)
mean(transphobia$tolerance.t2[transphobia$treat_ind == 1], na.rm = TRUE) -
mean(transphobia$tolerance.t2[transphobia$treat_ind == 0], na.rm = TRUE)
#2
prop.table(table(transphobia$treat_ind, transphobia$vf_party), 0)
prop.table(table(transphobia$treat_ind, transphobia$vf_party), 1)
prop.table(table(transphobia$treat_ind, transphobia$vf_party), 2)
prop.table(table(transphobia$treat_ind, transphobia$vf_racename), 0)
prop.table(table(transphobia$treat_ind, transphobia$vf_racename), 1)
prop.table(table(transphobia$treat_ind, transphobia$vf_racename), 2)
#3
prop.table(table(transphobia$treat_ind, transphobia$missing.t1))
prop.table(table(transphobia$treat_ind, transphobia$missing.t2))
prop.table(table(transphobia$tolerance.t1, transphobia$missing.t1))
prop.table(table(transphobia$tolerance.t2, transphobia$missing.t1))
mean(transphobia$tolerance.t1[transphobia$missing.t2 == 1], na.rm = TRUE) -
mean(transphobia$tolerance.t1[transphobia$missing.t2 == 0], na.rm = TRUE)
## 0.03163888
mean(transphobia$tolerance.t2[transphobia$missing.t1 == 1], na.rm = TRUE) -
mean(transphobia$tolerance.t2[transphobia$missing.t1 == 0], na.rm = TRUE)
#4
boxplot(tolerance.t1~treat_ind, data = transphobia)
#4
boxplot(tolerance.t1~treat_ind, data = transphobia)
trans <- read.csv("/Users/rexdeng/Dropbox/00_QPM_U_Shared/05_Exams/Midterm/data/transphobia.csv")
##question 1
mean(trans$tolerance.t0 [trans$treat_ind==1], na.rm=TRUE)
mean(trans$tolerance.t1 [trans$treat_ind==1], na.rm=TRUE)
mean(trans$tolerance.t2 [trans$treat_ind==1], na.rm=TRUE)
##question 2
treated<-subset(trans, trans$treat_ind==1)
tapply(treated$tolerance.t0,treated$vf_party, mean, na.rm=TRUE)
tapply(treated$tolerance.t1,treated$vf_party, mean, na.rm=TRUE)
tapply(treated$tolerance.t2,treated$vf_party, mean, na.rm=TRUE)
tapply(treated$tolerance.t0,treated$vf_racename, mean, na.rm=TRUE)
tapply(treated$tolerance.t1,treated$vf_racename, mean, na.rm=TRUE)
tapply(treated$tolerance.t2,treated$vf_racename, mean, na.rm=TRUE)
##question 3
table(treated= trans$treat_ind, missing.t1= trans$missing.t1)
table(treated= trans$treat_ind, missing.t1t2 = trans$missing.t1 & trans$missing.t2)
table(treated= trans$treat_ind, missing.t2= trans$missing.t2)
mean(trans$missing.t1 [trans$treat_ind==1])
mean(trans$missing.t1 [trans$treat_ind==0])
mean(trans$missing.t1 [trans$treat_ind==1])-mean(trans$missing.t1 [trans$treat_ind==0])
mean(trans$missing.t2 [trans$treat_ind==1])
mean(trans$missing.t2 [trans$treat_ind==0])
mean(trans$missing.t2 [trans$treat_ind==1])-mean(trans$missing.t2 [trans$treat_ind==0])
##question 4
boxplot(treated$tolerance.t1, main="Tolerance After 3 days with Treatment", ylab="Tolerance After 3 Days", xlab="Treatment", ylim=c(-2.5,2.5))
boxplot(trans$tolerance.t1[trans$treat_ind==0], main="Tolerance After 3 days without Treatment", ylab="Tolerance After 3 Days", xlab="Treatment", ylim=c(-2.5,2.5))
transphobia.csv
transphobia <- read.csv("/Users/rexdeng/Dropbox/00_QPM_U_Shared/05_Exams/Midterm/data/transphobia.csv")
## ------------------
## Question 1
## ------------------
# Subset into treatment and control groups
transphobia.control <- subset(transphobia, subset = transphobia$treat_ind == 0)
transphobia.treat <- subset(transphobia, subset = transphobia$treat_ind == 1)
# Baseline
t0.ate <- mean(transphobia.treat$tolerance.t0) - mean(transphobia.control$tolerance.t0)
# 3 days after
t1.ate <- mean(transphobia.treat$tolerance.t1, na.rm = TRUE) - mean(transphobia.control$tolerance.t1, na.rm = TRUE)
# 3 weeks after
t2.ate <- mean(transphobia.treat$tolerance.t2, na.rm = TRUE) - mean(transphobia.control$tolerance.t2, na.rm = TRUE)
## Party Differences
partyt0.diff <- tapply(transphobia.treat$tolerance.t0, transphobia.treat$vf_party, mean, na.rm = TRUE) -
tapply(transphobia.control$tolerance.t0, transphobia.control$vf_party, mean, na.rm = TRUE)
partyt1.diff <- tapply(transphobia.treat$tolerance.t1, transphobia.treat$vf_party, mean, na.rm = TRUE) -
tapply(transphobia.control$tolerance.t1, transphobia.control$vf_party, mean, na.rm = TRUE)
partyt2.diff <- tapply(transphobia.treat$tolerance.t2, transphobia.treat$vf_party, mean, na.rm = TRUE) -
tapply(transphobia.control$tolerance.t2, transphobia.control$vf_party, mean, na.rm = TRUE)
## Race Differences
racet0.diff <- tapply(transphobia.treat$tolerance.t0, transphobia.treat$vf_racename, mean, na.rm = TRUE) -
tapply(transphobia.control$tolerance.t0, transphobia.control$vf_racename, mean, na.rm = TRUE)
racet1.diff <- tapply(transphobia.treat$tolerance.t1, transphobia.treat$vf_racename, mean, na.rm = TRUE) -
tapply(transphobia.control$tolerance.t1, transphobia.control$vf_racename, mean, na.rm = TRUE)
partyt0.diff
partyt1.diff
partyt2.diff
racet0.diff
racet1.diff
racet2.diff
racet2.diff <- tapply(transphobia.treat$tolerance.t2, transphobia.treat$vf_racename, mean, na.rm = TRUE) -
tapply(transphobia.control$tolerance.t2, transphobia.control$vf_racename, mean, na.rm = TRUE)
racet2.diff
#Boxplot for the treatment and control conditions three days after treatment
boxplot(tolerance.t1 ~ treat_ind, data = transphobia, ylab = "Tolerance 3 Days After Baseline",
xlab = "Treatment", main = "Treatment and Control 3 Days After Baseline")
## average tolerance for first wave
treatment.t0 <- mean(transphobia$tolerance.t0[transphobia$treat_ind == 1])
control.t0 <- mean(transphobia$tolerance.t0[transphobia$treat_ind == 0])
treatment.t0
control.t0
## average tolerance for second wave
treatment.t1 <- mean(transphobia$tolerance.t1[transphobia$treat_ind == 1], na.rm = TRUE)
control.t1 <- mean(transphobia$tolerance.t1[transphobia$treat_ind == 0], na.rm = TRUE)
## average tolerance for third wave
treatment.t2 <- mean(transphobia$tolerance.t2[transphobia$treat_ind == 1], na.rm = TRUE)
control.t2 <- mean(transphobia$tolerance.t0[transphobia$treat_ind == 0], na.rm = TRUE)
## sample average treatment effect for each wave
SATE.t0 <- treatment.t0 - control.t0  ## wave 1
## [1] -0.04003847
SATE.t1 <- treatment.t1 - control.t1  ## wave 2
## [1] 0.1443226
SATE.t2 <- treatment.t2 - control.t2  ## wave 3
## average tolerance per party for first wave
dem_treatment.t0 <- mean(transphobia$tolerance.t0[transphobia$treat_ind == 1 &
transphobia$vf_party == "D"], na.rm = TRUE)
dem_control.t0 <- mean(transphobia$tolerance.t0[transphobia$treat_ind == 0 &
transphobia$vf_party == "D"], na.rm = TRUE)
dem_tolerance.t0 <- dem_treatment.t0 - dem_control.t0
boxplot(transphobia$tolerance.t1, main = "Tolerance Measure 3 Dats After Baseline",
xlab = "Treatment Condition", ylab = "Tolerance Rate")
boston <- read.csv("/Users/rexdeng/Dropbox/00_QPM_U_Shared/04_Psets/PSet2/data/boston.csv")
##Question One:
mean_age_treated <- mean(boston$age [boston$treatment == 1])
mean_age_treated #40.38182
mean_age_control <- mean(boston$age[boston$treatment == 0])
mean_age_control #44.29412
mean_age_treated - mean_age_control
mean_income_treated <- mean(boston$income [boston$treatment == 1])
mean_income_treated #135181.8
mean_income_control <- mean(boston$income[boston$treatment == 0])
mean_income_control #151154.4
mean_income_treated - mean_income_control
summary(boston$age[boston$treatment == 1])
##median age is 38 for the treatment group
## quartile one: 32  quartile three: 50
summary(boston$income[boston$treatment == 0])
##Proportion of "male" treatment control units
prop_male_treated <- mean(boston$male[boston$treatment == 1])
#treatment group: 52.73% male
prop_male_control <- mean(boston$male[boston$treatment == 0])
#control group: 58.82% male
prop_male_treated - prop_male_control
##Proportion of "whites" treatment control units
prop_white_treated <- mean(boston$white[boston$treatment == 1])
prop_white_treated
#treatment: 84.45% white
prop_white_control <- mean(boston$white[boston$treatment == 0])
prop_white_control
#control: 91.18% white
prop_white_treated - prop_white_control
##Proportion of "individuals that attended college" treatment control units
prop_college_treated <- mean(boston$college[boston$treatment == 1])
prop_college_treated
#85.45% attended college in treatment group
prop_college_control <- mean(boston$college[boston$treatment == 0])
prop_college_control
#89.71% attended college in control group
prop_college_treated - prop_college_control
##Proportion of "individuals born in the US" treatment control units
prop_usborn_treated <- mean(boston$usborn[boston$treatment == 1])
prop_usborn_treated
#72.72% us born in treatment group
prop_usborn_control <- mean(boston$usborn[boston$treatment == 0])
prop_usborn_control
#89.71% us born in control group
prop_usborn_treated - prop_usborn_control
##Question 2:
#cross-section comparison
treatment_mean <- mean(boston$numberim.pre[boston$treatment == 1], na.rm = T)
treatment_mean
#3.04
control_mean <- mean(boston$numberim.pre[boston$treatment == 0], na.rm = T)
control_mean
#2.91
treatment_mean - control_mean
#Before and After Comparison
treatdiff_mean <- mean(boston$numberim.post[boston$treatment == 1], na.rm = T) - mean(boston$numberim.pre[boston$treatment == 1], na.rm = T)
#Before and After Comparison
treatdiff_mean <- mean(boston$numberim.post[boston$treatment == 1], na.rm = T) - mean(boston$numberim.pre[boston$treatment == 1], na.rm = T)
controldiff_mean <- mean(boston$numberim.post[boston$treatment == 0], na.rm = T) - mean(boston$numberim.pre[boston$treatment == 0], na.rm = T)
treatdiff_mean ##0.08128342 became less likely to be proimmigrant over the course, 0.08 increase
controldiff_mean ## -0.1873708 control became more likely to be proimmigrant over the course, increased by 0.19
##Differences in Differences
treatdiff_mean - controldiff_mean
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
# Change eval=FALSE in the code block. Install packages as appropriate.
#install.packages("fivethirtyeight")
rm(list=ls())
library(fivethirtyeight)
library(tidyverse)
library(RColorBrewer)
library(webshot)
library(htmlwidgets)
library(tidytext)
# URL to the data that you've used.
polls <- read.csv("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/president_primary_polls_feb2020.csv", na.strings = "")
`%notin%` <- Negate(`%in%`)
#0 Reset the data frame when running this chunk
Endorsements <- endorsements_2020 # from the fiverthirtyeight package
#1.1 Rename
Endorsements <- Endorsements %>%
rename(candidate_name = endorsee)
#1.2 as.tibble
Endorsements <- as_tibble(Endorsements)
#1.3 filter and select
polls <- polls %>%
filter(candidate_name %in% c("Amy Klobuchar", "Bernard Sanders","Elizabeth Warren",
"Joseph R. Biden Jr.", "Michael Bloomberg", "Pete Buttigieg")) %>%
dplyr::select(candidate_name, sample_size, start_date, party, pct)
#1.4 Make names the same
Endorsements <- Endorsements %>%
mutate(candidate_name = ifelse(candidate_name == "Joe Biden", "Joseph R. Biden Jr.",
ifelse(candidate_name == "Bernie Sanders", "Bernard Sanders", candidate_name)))
## check which candidate names in polls are still not in Endorsements
unique(polls$candidate_name)[unique(polls$candidate_name) %notin% unique(Endorsements$candidate_name)] ### Make sense as there is no record in polls
#1.5 Join
polls_Endorse_joined <- left_join(polls, Endorsements, by = "candidate_name")
#1.6 The number of endorsements for each of the five candidates
## The joined dataset is not as useful as the original endorsement dataset as the joined one contains duplication of endorsers due to multiple matches
Endorsements_sum <- Endorsements %>%
filter(candidate_name %in% c("Amy Klobuchar", "Bernard Sanders","Elizabeth Warren",
"Joseph R. Biden Jr.", "Michael Bloomberg", "Pete Buttigieg")) %>%
group_by(candidate_name) %>%
summarise(n_endorsements = sum(!is.na(endorser)))
#1.7 ggplot
p <- Endorsements_sum %>%
ggplot() +
geom_bar(aes(x = candidate_name, y=n_endorsements), stat = "identity")
#1.8, 1.9 add a theme and labs and so on
p <- p +
labs(title = "Number of Endorsements by Selected Democratic Candidates",
x = "Candidate Name",
y = "Number of Endorsements") +
theme_dark()
p
ggsave("Q1.png", width = 10)
tweets <- read_csv(trump_tweets_url)
# Change eval=FALSE in the code block. Install packages as appropriate.
library(tidyverse)
library(tm)
library(lubridate)
library(wordcloud)
trump_tweets_url <- 'https://politicaldatascience.com/PDS/Datasets/trump_tweets.csv'
tweets <- read_csv(trump_tweets_url)
# 2.1 Separate date and time
tweets$date <- sapply(strsplit(tweets$created_at, " "), `[[`, 1)
tweets$time <- sapply(strsplit(tweets$created_at, " "), `[[`, 2)
tweets$date <- as.Date(tweets$date, format="%m/%d/%Y")
range(tweets$date)
# 2.2
top5_retweet_count <- tweets %>%
filter(is_retweet == F) %>%
slice_max(retweet_count, n=5)
#2.3 Corpus
Corpus <- VCorpus(VectorSource(tweets$text))
writeLines(head(strwrap(Corpus[[1]]), 10)) ## Check the tweets
#2.4 Remove
## Create a function called "addspace" that finds a user specified pattern and substitutes the pattern with a space.
addspace <- content_transformer(function(x, pattern) {
return(gsub(pattern, " ", x))
})
## For words connected by "-", replace it with a white space so that it won't be connected after space removal
Corpus <- tm_map(Corpus, addspace, "-")
## Remove patterns
removepattern <- content_transformer(function(x, pattern) {
return(gsub(pattern, "", x))
})
Corpus <- tm_map(Corpus, removepattern, "?(f|ht)(tp)(s?)(://)(.*)[.|/](.*)")
Corpus <- tm_map(Corpus, removepattern, "‘")
Corpus <- tm_map(Corpus, removepattern, "’")
## Remove others
Corpus <- tm_map(Corpus, stripWhitespace)
Corpus <- tm_map(Corpus, removePunctuation)
Corpus <- tm_map(Corpus, removeNumbers)
Corpus <- tm_map(Corpus, removeWords, stopwords("english"))
Corpus <- tm_map(Corpus,content_transformer(tolower))
writeLines(head(strwrap(Corpus[[1]]), 10)) ## Check the tweets again
#2.5 wordcloud
pal = brewer.pal(9,"BuGn")
wc <- wordcloud(Corpus, min.freq = 3, random.order = T, random.color =T, max.words = 50, colors = pal)
wc
#2.6 dtm
DTM <- DocumentTermMatrix(Corpus, control = list(weighting = weightTfIdf))
df_DTM <- tidy(DTM)
df_DTM_top50 <- df_DTM %>%
slice_max(count, n=50)
View(Corpus)
View(top5_retweet_count)
View(tweets)
## Do the results support the hypothesis?
## Solution:
cct <- read.csv("/Users/rexdeng/Dropbox/WashU MTE/00_QPM_U_Shared/03_Labs/Lab_08/data/progresa.csv")
View(cct)
unique(cct$treatment)
cct$t2000[cct$treatment == 1]
mean(cct$t2000[cct$treatment == 1])
ate_t2000 <- mean(cct$t2000[cct$treatment == 1]) - mean(cct$t2000[cct$treatment == 0])
## method 2
tapply(cct$t2000, cct$treatment, mean, na.rm=T)
ols1 <- lm(t2000 ~ treatment, data = cct)
?lm
ols1 <- lm(t2000 ~ treatment, data = cct)
View(ols1)
summary(ols1)
## method 2
tapply(cct$t2000, cct$treatment, mean, na.rm=T)
ols2 <- lm(t2000 ~ treatment + avgpoverty + pobtot1994 +
votos1994 + pri1994 + pan1994 + prd1994, data = cct)
summary(ols2)
summary(ols2)
ols5_1 <- lm(t2000r ~ treatment + avgpoverty + log(pobtot1994) +
t1994r + pri1994v + pan1994v + prd1994v, data = cct)
summary(ols5_1)
ols5_2 <- lm(pri2000v ~ treatment + avgpoverty + log(pobtot1994) +
t1994r + pri1994v + pan1994v + prd1994v, data = cct)
summary(ols5_2)
hist(cct$pobtot1994)
hist(log(cct$pobtot1994))
ols5_1 <- lm(t2000r ~ treatment + avgpoverty + log(pobtot1994) +
t1994r + pri1994v + pan1994v + prd1994v, data = cct)
summary(ols5_1)
ols5_2 <- lm(pri2000v ~ treatment + avgpoverty + log(pobtot1994) +
t1994r + pri1994v + pan1994v + prd1994v, data = cct)
summary(ols5_2)
hist(cct$pobtot1994)
hist(log(cct$pobtot1994))
cct <- read.csv("/Users/rexdeng/Dropbox/WashU MTE/00_QPM_U_Shared/03_Labs/Lab_08/data/progresa.csv")
View(cct)
cct$t2000[cct$treatment==1]
ate <- mean(cct$t2000[cct$treatment==1]) - mean(cct$t2000[cct$treatment==0])
tapply(cct$t2000, cct$treatment, mean, na.rm = T)
?lm
## now it's regression
ols1 <- lm(t2000 ~ treatment, data = cct)
View(ols1)
summary(ols1)
## method 2
tapply(cct$t2000, cct$treatment, mean, na.rm = T)
ols2 <- lm(t2000 ~ treatment + avgpoverty + pobtot1994 +
votos1994 + pri1994 + pan1994 + prd1994, data = cct)
summary(ols2)
coef(ols2)
coef(ols2)[2]
coef(ols2)["treatment"]
ols5_1 <-lm(t2000r ~ treatment + avgpoverty + log(pobtot1994) +
t1994r + pri1994v + pan1994v + prd1994v, data = cct)
summary(ols5_1)
ols5_2 <-lm(pri2000v ~ treatment + avgpoverty + log(pobtot1994) +
t1994r + pri1994v + pan1994v + prd1994v, data = cct)
summary(ols5_2)
hist(cct$pobtot1994)
hist(log(cct$pobtot1994))
library(tidyverse)
library(tidyverse)
library(plyr)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
#Package directory
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Install package
install(current.code)
## Let's look at a function
?`PoisMLE-class`
?logLik
?mle
?standardError
?estimatePois
## Load libraries and set working directory
library(devtools)
library(roxygen2)
#Package directory
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Install package
install(current.code)
## Let's look at a function
?`PoisMLE-class`
?logLik
?mle
?standardError
?estimatePois
## Load libraries and set working directory
library(devtools)
library(roxygen2)
#Package directory
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Install package
install(current.code)
## Let's look at a function
?`PoisMLE-class`
library(devtools)
library(roxygen2)
#Package directory
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?`PoisMLE-class`
remove.packages("PoisMLE")
## Let's look at a function
?`PoisMLE-class`
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
#Package directory
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?`PoisMLE-class`
?logLik
?logLik
## Let's look at a function
?`PoisMLE-class`
?logLik
?mle
?standardError
?estimatePois
## Let's try it out
set.seed(123)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
mle(y)
standardError(y,"bootstrap", B=1000)
standardError(y,"basic", B=1000)
estimatePois_obj <- estimatePois(y, 2, "bootstrap")
plot(estimatePois_obj)
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's look at a function
?`PoisMLE-class`
?logLik
?mle
?standardError
?estimatePois
## Let's try it out
set.seed(123)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
mle(y)
standardError(y,"bootstrap", B=1000)
standardError(y,"basic", B=1000)
estimatePois_obj <- estimatePois(y, 2, "bootstrap")
plot(estimatePois_obj)
set.seed(123)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
mle(y)
standardError(y,"bootstrap", B=1000)
standardError(y,"basic", B=1000)
estimatePois_obj <- estimatePois(y, 2, "bootstrap")
plot(estimatePois_obj)
setwd("/Users/rexdeng/Dropbox/mine/academics_career/WashU/Classes/202122Spring-Stat programming Jacob/PS/ASP2022_PS/Midterm/ExamPackage")
## This can be run many times as the code is updates
current.code <- as.package("PoisMLE")
check(current.code)
load_all(current.code)
document(current.code)
## Let's try it out
set.seed(123)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y,2)
mle(y)
standardError(y,"bootstrap", B=1000)
standardError(y,"basic", B=1000)
estimatePois_obj <- estimatePois(y, 2, "bootstrap")
plot(estimatePois_obj)
## Not working
y2 <- c(-1,2,3,4,5)
logLik(y2,2)
## Not working
y2 <- c(-1,2,3,4,5)
logLik(y2,2)
logLik(y,-1)
mle(y2)
y <- sample(x=1:10, size=20, replace=TRUE)
standardError(y,"whatever")
estimatePois(y2)
